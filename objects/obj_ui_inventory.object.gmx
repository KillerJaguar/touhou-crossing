<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui_inventory</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>obj_ui_base</parentName>
  <maskName>spr_ui_inventory_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

show = false;
show_y = 240 / 2;
hide_y = show_y + 240;
show_speed = (hide_y - show_y) / (room_speed * 0.30);

x = 320 / 2;
y = hide_y;

font_money = font_add_sprite_ext(spr_ui_inventory_bell_font, "0123456789,", true, 1);
np_name = ninepatch_create(14, 13, 1, 1, 14, 13, 14, 13);//sprite_get_9patch(spr_ui_inventory_info);

// TODO load a 32x32 pattern to use as background
bg = bg_default_pattern;
bg_x = 0;
bg_y = 0;
bg_speed = 32 * 0.40 / room_speed;

surface = undefined;

cursor = instance_create(0, 0, obj_ui_cursor);
cursor.depth = depth - 1000;
cursor.image_xscale = -1;
cursor_speed = 15;

inv_index = 0;
for (var i = 0; i &lt; inventory_size; i++)
    inventory[i] = noone;
    
current = noone;
moving = noone;

character = instance_create(133, 22, obj_ui_inventory_character);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>font_delete(font_money);
ds_list_destroy(np_name);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update positions

if (moving != noone)
{
    moving.x = cursor.x - 26;
    moving.y = cursor.y;
    moving.active = true;
}

for (var i = 0; i &lt; inventory_size; i++)
{
    if (inventory[i] != noone)
    {
        inventory[i].x = inventory_get_item_slot_x(i);
        inventory[i].y = inventory_get_item_slot_y(i);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y = clamp(y - show_speed * iff(show, 1, -1), show_y, hide_y);

if (not show and y == hide_y)
{
    // Deactivate objects
    globalvar ui_inventory;
    
    instance_deactivate_object(ui_inventory);
    instance_deactivate_object(ui_inventory.cursor);
    instance_deactivate_object(ui_inventory.character);
    
    for (var i = 0; i &lt; inventory_size; i++)
        if (ui_inventory.inventory[i] != noone)
            instance_deactivate_object(ui_inventory.inventory[i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cursor.visible = visible;

var item_col = inv_index mod 5;
var item_row = inv_index div 5;

var is_item = (0 &lt;= inv_index and inv_index &lt;= 14);
var is_letter = (15 &lt;= inv_index);

/// Move the cursor

var displayed = (show and y == show_y);

if (not displayed)
{
    with (cursor)
    {
        x = inventory_get_cursor_x(other.inv_index);
        y = inventory_get_cursor_y(other.inv_index);
    }
}

else
{
    with (cursor)
    {
        var xx = inventory_get_cursor_x(other.inv_index);
        var yy = inventory_get_cursor_y(other.inv_index);
        
        speed = min(point_distance(x, y, xx, yy), other.cursor_speed);
        direction = point_direction(x, y, xx, yy);
    }
}

/// User Input

var update = false;

if (displayed)
{
    if (input_check_pressed(input.start) and moving == noone)
    {
        update = true;
        show = false;
        
        obj_player.allow_input = true;
    }

    if (input_check_pressed(input.a))
    {
        update = true;
    
        if (current != noone)
        {
            moving = current;
            inventory[inv_index] = noone;
            cursor.grab = true;
        }
        else if (is_item and inventory[inv_index] == noone)
        {
            inventory[inv_index] = moving;
            moving = noone;
            cursor.grab = false;
        }
    }

    else if (input_check_pressed(input.left))
    {
        update = true;
    
        if (is_item and item_col != 0)
            inv_index--;
        else if (is_letter)
        {
            if (inv_index mod 2 == 0)
                inv_index--;
            else
            {
                switch (inv_index)
                {
                    case 15:
                    case 17:
                    case 19:
                        inv_index = 4; 
                    break;
                    
                    case 21: 
                        inv_index = 9; 
                    break;
                    
                    case 23: 
                        inv_index = 14; 
                    break;
                }
            }
        }
    }
    
    else if (input_check_pressed(input.right))
    {
        update = true;
    
        if (is_item)
        {
            if (item_col &lt; 4)
                inv_index++;
            else if (item_col == 4)
            {
                switch (item_row)
                {
                    case 0: inv_index = 19; break;
                    case 1: inv_index = 21; break;
                    case 2: inv_index = 23; break;
                }
            }
        }
        else if (is_letter and inv_index mod 2 == 1)
            inv_index++;
    }
    
    else if (input_check_pressed(input.up))
    {
        update = true;
    
        if (is_item)
        {
            if (item_row != 0)
                inv_index -= 5;
        }
        if (is_letter and 16 &lt; inv_index)
            inv_index -= 2;
    }
    
    else if (input_check_pressed(input.down))
    {
        update = true;
    
        if (is_item)
        {
            if (item_row != 2)
                inv_index += 5;
        }
        else if (is_letter and inv_index &lt; 23)
            inv_index += 2;
    }
}

/// Update current

if (update)
{
    is_item = (0 &lt;= inv_index and inv_index &lt;= 14);
    is_letter = (15 &lt;= inv_index);

    if (current != noone)
    {
        current.active = false;
        current.show_name = false;
        current = noone;
    }
    
    if (moving == noone and is_item and inventory[inv_index] != noone)
    {
        current = inventory[inv_index];
        current.active = true;
        current.show_name = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (not surface_exists(surface))
    surface = surface_create(512, 512);
    
surface_set_target(surface);
{
    bg_x = (bg_x + bg_speed) mod 32;
    bg_y = bg_x;

    draw_clear(c_green);
        
    draw_background_tiled(bg, -bg_x, -bg_y);
    
    draw_set_blend_mode_ext(bm_dest_color, bm_src_alpha);
    draw_sprite(mask_index, 0, sprite_get_xoffset(mask_index), sprite_get_yoffset(mask_index));
    draw_set_blend_mode(bm_normal);
}
surface_reset_target();


draw_surface_part(surface, 0, 0, sprite_get_width(sprite_index), sprite_get_height(sprite_index), x - sprite_get_xoffset(sprite_index), y - sprite_get_yoffset(sprite_index));
draw_set_blend_mode(bm_normal);

draw_self();

var xoffset = sprite_get_xoffset(sprite_index);
var yoffset = sprite_get_yoffset(sprite_index);

// Town name
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(global.font_dialogue);
draw_text(x + 35 - xoffset, y + 18 - yoffset, "Gensokyo");

// Player name
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(global.font_dialogue);
draw_text(x + 48 - xoffset, y + 34 - yoffset, player_get_name());

// Money
draw_set_halign(fa_right);
draw_set_valign(fa_top);
draw_set_font(font_money);
draw_text(x + 94 - xoffset, y + 65 - yoffset, string_thousands(min(global.money, 99999)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
