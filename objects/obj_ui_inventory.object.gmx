<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui_inventory</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>obj_ui_base</parentName>
  <maskName>spr_ui_inventory_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

show = false;
show_y = 240 / 2;
hide_y = show_y + 240;
show_speed = (hide_y - show_y) / (room_speed * 0.30);

x = 320 / 2;
y = hide_y;

font_money = font_add_sprite_ext(spr_ui_inventory_bell_font, "0123456789,", true, 1);
np_name = ninepatch_create(14, 13, 1, 1, 14, 13, 14, 13);//sprite_get_9patch(spr_ui_inventory_info);

// TODO load a 32x32 pattern to use as background
bg = bg_default_pattern;
bg_x = 0;
bg_y = 0;
bg_speed = 32 * 0.40 / room_speed;

surface = undefined;

inv_index = 0;
for (var i = 0; i &lt; inventory_size; i++)
    inventory[i] = noone;
    
current = noone;
moving = noone;

// Action
actions_actions = 0;
actions_index = 0;
actions_np = ninepatch_create(14, 13, 17, 19, 14, 13, 17, 19);
actions_visible = false;
actions_x = 0;
actions_y = 0;

// Character

char_image_index = 0;
char_image_speed = 5 / room_speed;

// Cursor

curs_grab = false;
curs_image_index = 0;
curs_image_speed = 2 / room_speed;
curs_image_xscale = -1;
curs_visible = visible;
curs_x = 0;
curs_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>font_delete(font_money);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update positions

if (moving != noone)
{
    moving.x = curs_x - 26;
    moving.y = curs_y;
    moving.active = true;
}

for (var i = 0; i &lt; inventory_size; i++)
{
    if (inventory[i] != noone)
    {
        inventory[i].x = inventory_get_item_slot_x(i);
        inventory[i].y = inventory_get_item_slot_y(i);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y = clamp(y - show_speed * iff(show, 1, -1), show_y, hide_y);

if (not show and y == hide_y)
{
    instance_deactivate_object(global.ui_inventory);
    
    for (var i = 0; i &lt; inventory_size; i++)
        if (global.ui_inventory.inventory[i] != noone)
            instance_deactivate_object(global.ui_inventory.inventory[i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>curs_visible = visible;

var item_col = inv_index mod 5;
var item_row = inv_index div 5;

var is_item = (0 &lt;= inv_index and inv_index &lt;= 14);
var is_letter = (15 &lt;= inv_index);

/// Move the cursor

var displayed = (show and y == show_y);

if (not displayed)
{
    curs_x = inventory_get_cursor_x(inv_index);
    curs_y = inventory_get_cursor_y(inv_index);
}

else if (not actions_visible)
{
    curs_x = lerp(curs_x, inventory_get_cursor_x(inv_index), 0.2);
    curs_y = lerp(curs_y, inventory_get_cursor_y(inv_index), 0.2);   
    curs_image_xscale = -1;
}

/// User Input

if (displayed)
{
    // inventory input
    if (not actions_visible)
    {
        if (input_check_pressed(input.start) and moving == noone)
        {
            show = false;
            
            global.player_input = true;
            global.ui_clock.can_show = true;
        }
    
        if (input_check_pressed(input.a))
        {
            if (current != noone)
            {
                actions_actions = item_get_actions(current.item);
                actions_index = array_length_1d(actions_actions)-1;
                actions_x = inventory_get_cursor_x(inv_index);
                actions_y = inventory_get_cursor_y(inv_index);
                actions_visible = true;
                
                curs_x -= sprite_get_width(spr_ui_cursor);
                curs_image_xscale = 1;
            }
            else if (is_item and inventory[inv_index] == noone)
            {
                inventory[inv_index] = moving;
                moving = noone;
                curs_grab = false;
            }
        }
    
        if (input_check_pressed(input.left))
        {    
            if (is_item and item_col != 0)
                inv_index--;
            else if (is_letter)
            {
                if (inv_index mod 2 == 0)
                    inv_index--;
                else
                {
                    switch (inv_index)
                    {
                        case 15:
                        case 17:
                        case 19:
                            inv_index = 4; 
                        break;
                        
                        case 21: 
                            inv_index = 9; 
                        break;
                        
                        case 23: 
                            inv_index = 14; 
                        break;
                    }
                }
            }
        }
        
        if (input_check_pressed(input.right))
        {
            if (is_item)
            {
                if (item_col &lt; 4)
                    inv_index++;
                else if (item_col == 4)
                {
                    switch (item_row)
                    {
                        case 0: inv_index = 19; break;
                        case 1: inv_index = 21; break;
                        case 2: inv_index = 23; break;
                    }
                }
            }
            else if (is_letter and inv_index mod 2 == 1)
                inv_index++;
        }
        
        if (input_check_pressed(input.up))
        {    
            if (is_item)
            {
                if (item_row != 0)
                    inv_index -= 5;
            }
            if (is_letter and 16 &lt; inv_index)
                inv_index -= 2;
        }
        
        if (input_check_pressed(input.down))
        {   
            if (is_item)
            {
                if (item_row != 2)
                    inv_index += 5;
            }
            else if (is_letter and inv_index &lt; 23)
                inv_index += 2;
        }
        
        // update current
    
        is_item = (0 &lt;= inv_index and inv_index &lt;= 14);
        is_letter = (15 &lt;= inv_index);
    
        if (current != noone)
        {
            current.active = false;
            current.show_name = false;
            current = noone;
        }
        
        if (moving == noone and is_item and inventory[inv_index] != noone)
        {
            current = inventory[inv_index];
            current.active = not actions_visible;
            current.show_name = not actions_visible;
        }
    }
    
    // actions input
    else
    {
        if (input_check_pressed(input.up))
            actions_index = min(actions_index+1, array_length_1d(actions_actions)-1);    
        
        if (input_check_pressed(input.down))
            actions_index = max(actions_index-1, 0);
        
        if (input_check_pressed(input.a) or
            (input_check_pressed(input.b) and actions_index == 0))
        {
            event_user(0);
            actions_visible = false;
        }
        
        if (input_check_pressed(input.b))
            actions_index = 0;
        
        // update cursor
        
        curs_x = lerp(curs_x, actions_x  - 21, 0.1);
        curs_y = lerp(curs_y, actions_y - 3 - 16 * actions_index, 0.1);
        
        if (not actions_visible)
        {
            curs_x += sprite_get_width(spr_ui_cursor);
            curs_image_xscale = -1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Item Action

var index = (array_length_1d(actions_actions)-1)-actions_index;
var action = actions_actions[index];

switch (action)
{
    case "Grab":
        moving = current;
        inventory[inv_index] = noone;
        
        curs_x = inventory_get_item_slot_x(inv_index);
        curs_y = inventory_get_item_slot_y(inv_index);
        curs_grab = true;
    break;
    
    case "Drop":
        inventory_drop_item(inv_index);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (not surface_exists(surface))
    surface = surface_create(512, 512);
    
// Background
    
surface_set_target(surface);
{
    bg_x = (bg_x + bg_speed) mod 32;
    bg_y = bg_x;

    draw_clear(c_green);
        
    draw_background_tiled(bg, -bg_x, -bg_y);
    
    draw_set_blend_mode_ext(bm_dest_color, bm_src_alpha);
    draw_sprite(mask_index, 0, sprite_get_xoffset(mask_index), sprite_get_yoffset(mask_index));
    draw_set_blend_mode(bm_normal);
}
surface_reset_target();


draw_surface_part(surface, 0, 0, sprite_get_width(sprite_index), sprite_get_height(sprite_index), x - sprite_get_xoffset(sprite_index), y - sprite_get_yoffset(sprite_index));
draw_set_blend_mode(bm_normal);

draw_self();

var xoffset = sprite_get_xoffset(sprite_index);
var yoffset = sprite_get_yoffset(sprite_index);

// Town name
draw_set_color(c_black);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(global.font);
draw_text(x + 35 - xoffset, y + 18 - yoffset, "Gensokyo");

// Player name
draw_set_color(c_black);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(global.font);
draw_text(x + 48 - xoffset, y + 34 - yoffset, global.player_name);

// Money
draw_set_color(c_white);
draw_set_halign(fa_right);
draw_set_valign(fa_top);
draw_set_font(font_money);
draw_text(x + 94 - xoffset, y + 65 - yoffset, string_thousands(min(global.money, 99999)));

// Character

var char_sprite_index = player_get_sprite(global.player_sprite, 270);
char_image_index = (char_image_index + char_image_speed) mod sprite_get_number(char_sprite_index);

var char_x = x - xoffset + 133 + sprite_get_xoffset(char_sprite_index) * 1.5;
var char_y = y - yoffset + 22 + sprite_get_yoffset(char_sprite_index) * 1.6;

draw_sprite_ext(char_sprite_index, char_image_index, char_x, char_y, 2, 2, 0, c_white, 1);

// Actions

if (actions_visible)
{
    draw_set_font(global.font);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    var len = array_length_1d(actions_actions);
    
    // calculate width, height
    var width = 0, height = len * 16;
    for (var i = 0; i &lt; len; i++)
        width = max(width, string_width(actions_actions[i]));
    
    // draw background
    var wbuffer = 8, hbuffer = 5;
    ninepatch_draw(actions_np, spr_ui_inventory_selection, 0, 
        actions_x - wbuffer - 5, actions_y - hbuffer - height / 2, 
        width + wbuffer * 2, height + hbuffer * 2, 
        c_white, 1);
    
    // draw commands
    draw_set_color(make_color_rgb(64, 104, 144));
    for (var i = 0; i &lt; len; i++)
        draw_text(actions_x - 5, actions_y + 3 + 16 * i - height/2, actions_actions[i]);
}

// Cursor

if (curs_visible)
{
    var curs_sprite_index = spr_ui_cursor;
    if (curs_grab)
        curs_sprite_index = spr_ui_cursor_grabbed;
    
    curs_image_index = (curs_image_index + curs_image_speed) mod sprite_get_number(curs_sprite_index);    
    
    draw_sprite_ext(curs_sprite_index, curs_image_index, curs_x, curs_y, curs_image_xscale, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
