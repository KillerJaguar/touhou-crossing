<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Console

console_enabled = false;
console_string = "";
console_cursor_count = 0;
console_cursor_alpha = 1;
console_set_screenshot = false;
console_close = true;
console_history_rows = 6;
console_sep = ',';

console_history = ds_list_create();
for(var i=0; i &lt; console_history_rows; i++) 
    ds_list_add(console_history,"");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Console

/**************************************
* This clears the history list in the
* console.
**************************************/

ds_list_destroy(console_history);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Console Step

visible = console_enabled;

if (console_enabled)
{
    /* Set console string */
    console_string = keyboard_string;
    
    /* Flashing cursor effect */
    console_cursor_count += 2/room_speed;
    if (console_cursor_count &gt; 1)
    {
        if console_cursor_alpha = 1 then
        console_cursor_alpha = 0 else console_cursor_alpha = 1;
        console_cursor_count = 0;
    }
    
    /* Get last command */
    if keyboard_check_pressed(vk_up) then
    keyboard_string = ds_list_find_value(console_history,0);
    
    /* Submit console string */
    if keyboard_check_pressed(vk_enter) {
    
        var i,len,no,c;
    
        /* Add to history */
        ds_list_insert(console_history,0,console_string);
        ds_list_delete(console_history,console_history_rows);
    
        /* Split console string */
        len = string_length(console_sep)-1;
        no = string_count(console_sep,console_string);
        for(i=0; i&lt;=no; i+=1;) {
            c[i] = console_string;
            repeat (i)
                c[i] = string_delete(c[i],1,string_pos(console_sep,c[i])+len);
            c[i] = string_delete(c[i],string_pos(console_sep,c[i]),string_length(c[i]));
        }
        
        /* Perform command */
        instance_activate_all();
        console_execute(c,no);
        keyboard_string = "";
        
        /* Close console on command submit */
        if (console_close)
        {
            surface_free(console_surface);
            console_enabled = false;
        } 
        else 
            instance_deactivate_all(true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Console

//draw_set_font(fnt_Console);

/**************************************
* This script draws the console. You
* can set the coordinates, colors and
* alpha. Height is derived from the
* number of rows you specified when
* initializing the console in the Create
* event.
*
* Example Use:
* console_draw(10,10,400,c_navy,c_blue,c_white,c_yellow,0.8);
**************************************/

//var xx=argument0,yy=argument1,w=argument2,
//r=console_history_rows,l=string_height("l")+12,
//m=10;
//
//if console_enabled = true {
//
//    /* Freeze screen */
//    if surface_exists(console_surface) then 
//    draw_surface(console_surface, view_xview[0], view_xview[0]);
//    
//    /* Header */
//    draw_set_alpha(argument7);
//    draw_set_color(argument3);    
//    draw_rectangle(xx,yy,xx+w,yy+l,0);   
//   draw_set_color(argument6);
//   draw_set_valign(fa_middle);
//    draw_set_halign(fa_right); 
//    draw_text(xx+w-m,yy+l/2,string(fps)+" / "+string(room_speed));
//    
//    /* History */
//    draw_set_color(argument4);
//    draw_rectangle(xx,yy+l,xx+w,yy+l+(r*l),0); 
//    draw_set_color(argument5);
//    draw_set_halign(fa_left); 
//    for (i=0;i&lt;r;i++) 
//    draw_text(xx+m,(yy+l+(r*l)-l/2)-(i*l),ds_list_find_value(console_history,i));
//    
//    /* Submit */
//    draw_set_color(argument3);
//    draw_rectangle(xx,yy+l+(r*l),xx+w,yy+l*2+(r*l),0);    
//    draw_set_color(argument6);    
//    draw_text(xx+m,yy+l+(r*l)+l/2,"&gt;");    
//    draw_set_color(argument5);    
//    draw_text(xx+m+string_width("&gt; "),yy+l+(r*l)+l/2,console_string);   
//    draw_set_alpha(console_cursor_alpha);    
//    draw_text(xx+m+string_width("&gt; "+console_string),yy+l+(r*l)+l/2,"|");
//    
//    draw_set_alpha(1);
//    draw_set_halign(fa_left);
//    draw_set_valign(fa_top);
//    
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Do nothing</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle Console

if (not console_enabled)
{
    console_surface = surface_create(window_get_width(), window_get_height());
    surface_set_target(console_surface);
        draw_clear_alpha(c_black, 0);
        with (all) event_perform(ev_draw,0);
    surface_reset_target();
    
    instance_deactivate_all(true);
    keyboard_string = "";
    console_enabled = true;
} 
else 
{
    surface_free(console_surface);
    instance_activate_all();
    console_enabled = false;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
