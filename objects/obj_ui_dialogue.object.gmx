<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui_dialogue</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_ui_base</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
x = display_get_gui_width() / 2;
y = display_get_gui_height() + sprite_height;

active = false;
display = false;
display_rate = sprite_height / (room_speed * 0.25);

font = global.font;

// continue

cont_image_index = 0;
cont_image_speed = 2 / room_speed;
cont_sprite_index = spr_ui_dialogue_continue;
cont_visible = false;

// response

resp_index = 0;
resp_ninepatch = ninepatch_create(10, 10, 9, 9, 10, 10, 9, 9);
resp_visible = false;
resp_visible_changed = false;

curs_x = 0;
curs_y = 0;
curs_image_index = 0;
curs_image_speed = 2 / room_speed;
curs_sprite_index = spr_ui_cursor;

// text

text_active = true;
text_display = 1;
text_display_rate = 1/40;
text_sep = 15;
text_str = "";
text_surf = -1;
text_width = 173;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(resp_ninepatch);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (not active) exit;

var min_y = display_get_gui_height();
var max_y = display_get_gui_height() + sprite_height;

x = display_get_gui_width() / 2;
y = clamp(y - display_rate * iff(display, 1, -1), min_y, max_y);

text_active = y == min_y;
visible = (y != max_y);

if (not visible and not display)
{
    active = false;

    global.player_input = true;
    global.ui_clock.can_show = true;
    
    // Release the NPC
    if (global.dialogue_npc != -1)
        global.dialogue_npc.can_think = true;
}

// response
if (resp_visible)
{
    if (input_check_pressed(input.down))
    {
        curs_image_index = 0;
        resp_index = min(resp_index + 1, global.dialogue_num_responses - 1);
    }
        
    if (input_check_pressed(input.up))
    {
        curs_image_index = 0;
        resp_index = max(resp_index - 1, 0)
    }
    
    if (input_check_pressed(input.a))
    {
        message_index = resp_index + 1;
        event_user(0);
        
        resp_index = 0;
        resp_visible = false;
    }
}

// continue

if (cont_visible)
{
    if (input_check_pressed(input.a) or mouse_check_button_pressed(mb_left))
        event_user(0);
}

cont_visible = text_display == 1 and not resp_visible;
    
// text

if (text_active)
    text_display = clamp(text_display + text_display_rate_, 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Perform endaction

if (not is_undefined(global.dialogue_endaction[message_index]))
    script_execute(global.dialogue_endaction[message_index]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Progress

var buffer = global.dialogue_buffer[message_index];

// get next in queue
if (not ds_queue_empty(buffer))
{
    cont_visible = false;
    text_str = ds_queue_dequeue(buffer);
    text_display = 0;
    text_display_rate_ = 1 / (text_display_rate * string_length(text_str)) / room_speed;
}

// show responses
else if (not responded and global.dialogue_num_responses &gt; 0 and not resp_visible)
{
    resp_visible = true;
    resp_visible_changed = true;
    responded = true;
}

// no more, no responses
else if (not is_undefined(global.dialogue_result[message_index]))
{
    event_user(1);
    npc_speak(global.dialogue_npc, global.dialogue_result[message_index]);
}

// close
else
{
    event_user(1);
    display = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index, image_index, x, y);

draw_set_color(c_black);
draw_set_font(font);

// speaker

if (image_index == 0)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    draw_text(x-55, y-71, global.dialogue_speaker);
}

// text

draw_set_halign(fa_left);
draw_set_valign(fa_top);

var amt = floor(string_length(text_str) * text_display);
var str = string_copy(text_str, 0, amt);

draw_text_ext(x-86, y-53, str, text_sep, text_width);

// continue

if (cont_visible)
{
    cont_image_index = (cont_image_index + cont_image_speed) mod sprite_get_number(cont_sprite_index);
    draw_sprite(cont_sprite_index, cont_image_index, x+90, y-14);
}

// response

if (resp_visible)
{
    var xoffset = 20;
    var yoffset = -50;
    
    var response = global.dialogue_response;
    var num_responses = global.dialogue_num_responses;
    
    var max_width = 0;
    for (var i = 0; i &lt; num_responses; i++)
        max_width = max(max_width, string_width(response[i]));
      
    var height = (num_responses * 15);
    ninepatch_draw(resp_ninepatch, spr_ui_dialogue_response, 0, x+xoffset - 6, y+yoffset - 7 - height, max_width + 9, height + 7, c_white, 1);
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    for (var i = num_responses - 1; i &gt;= 0; i--)
    {
        var yy = y+yoffset + (num_responses - i) * -15;
    
        if (i == resp_index)
        {
            var tarx = x+xoffset - 7 - 14;
            var tary = yy - 18;
        
            curs_x = lerp(curs_x, tarx, 0.2);
            curs_y = lerp(curs_y, tary, 0.2);
            
            if (resp_visible_changed)
            {
                curs_x = tarx;
                curs_y = tary;
                resp_visible_changed = false;
            }
        }
        
        draw_set_color(c_black);
        draw_text(x+xoffset, yy, response[i]);
    }
    
    curs_image_index = (curs_image_index + curs_image_speed) mod sprite_get_number(curs_sprite_index);
    draw_sprite(curs_sprite_index, curs_image_index, curs_x, curs_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>121,81</point>
    <point>121,121</point>
  </PhysicsShapePoints>
</object>
