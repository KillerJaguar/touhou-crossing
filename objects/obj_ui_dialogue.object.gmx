<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui_dialogue</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>10000</depth>
  <persistent>-1</persistent>
  <parentName>obj_ui_base</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_y = 240;
hide_y = 240 + sprite_get_height(sprite_index);

image_speed = 0;
x = 160;
y = hide_y;

display = false;
display_rate = 0.30;

font = global.font_dialogue;

message = "";
message_index = 0;
message_queue = ds_queue_create();
message_rate = 0.025;

next_page = false;

obj_continue = instance_create(90, -14, obj_ui_dialogue_continue);
obj_response = instance_create(20, -50, obj_ui_dialogue_response);

linker = linker_tree_create();
linker_leaf_add(linker, 90, -14, obj_continue);
linker_leaf_add(linker, 20, -50, obj_response);

updater = ScheduleAlarm(id, true, message_rate, 0);
ScheduleSetRepeat(updater, -1);
SchedulePause(updater);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>linker_tree_destroy(linker);

with (obj_continue) instance_destroy();
with (obj_response) instance_destroy();

ds_queue_destroy(message_queue);

//if (global.dialogue_npc != -1)
//    global.dialogue_npc.can_think = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (not ds_queue_empty(message_queue))
    message += ds_queue_dequeue(message_queue);
    
if (ds_queue_empty(message_queue))
    SchedulePause(updater);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>linker_leaves_snap(linker);

if (not next_page) exit;

next_page = false;

var buffer = global.dialogue_buffer[message_index];
    
var endaction = global.dialogue_endaction[message_index];
var has_endaction = not is_undefined(endaction);

// get next in queue
if (not ds_queue_empty(buffer))
{
    message = "";

    var str = ds_queue_dequeue(buffer);
    var len = string_length(str);
    
    ds_queue_clear(message_queue);
    
    for (var i = 1; i &lt;= len; i++)
        ds_queue_enqueue(message_queue, string_char_at(str, i));
}

// show responses
else if (not responded and global.dialogue_num_responses &gt; 0 and not obj_ui_dialogue_response.show)
{
    obj_ui_dialogue_response.show = true;
    responded = true;
}

// no more, no responses
else if (not is_undefined(global.dialogue_result[message_index]))
{
    if (has_endaction)
        script_execute(endaction);
    npc_speak(global.dialogue_npc, global.dialogue_result[message_index]);
}

// close
else
{
    if (has_endaction)
        script_execute(endaction);
    display = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xx = x;
var yy = iff(display, show_y, hide_y);
var spd = abs(hide_y - show_y) / display_rate * global.dt_steady;

move_towards(xx, yy, spd);

if (y == show_y and not ds_queue_empty(message_queue) and ScheduleIsPaused(updater))
{
    ScheduleResume(updater);
}

if (ScheduleIsPlaying(updater))
{
    ScheduleSetTimeScale(updater, iff(input_check(input.a), 2, 1));
}

visible = (y != hide_y);

//if (not visible)
//    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

draw_self();

// speaker
if (image_index == 0)
{
    draw_set_color(c_white);
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    draw_text(x - 55, y - 71, global.dialogue_speaker);
}

// message
{
    draw_set_color(c_white);
    draw_set_font(font);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    draw_text_ext(x - 86, y - 53, message, 15, 173);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>121,81</point>
    <point>121,121</point>
  </PhysicsShapePoints>
</object>
