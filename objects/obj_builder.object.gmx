<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_activate = ord('B');
key_deactivate = vk_escape;
key_destruct = vk_delete;

visible = false;
cur_struct = -1;

destruct_mode = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// TODO move construct and deconstruct functions into scripts

if (keyboard_check_pressed(vk_delete))
    destruct_mode = not destruct_mode;
    
if (keyboard_check_pressed(vk_escape))
{
    destruct_mode = false;
    visible = false;
    ui_display_money(false);
}

if (destruct_mode)
{
    visible = false;

    with (obj_struct_base)
    {
        if (position_meeting(mouse_x, mouse_y, id))
        {
            // BUG cancel destruct causes buildings to remain yellow
            image_blend = c_yellow;
            
            if (mouse_check_button_pressed(mb_left))
            {
                var demolish = struct_can_destruct(id);
            
                if (not is_string(demolish))
                {
                    other.destruct_mode = false;    
                
                    image_blend = c_white;
                    struct_deconstruct(id);    
                }
                else if (string_length(demolish) &gt; 0)
                    ui_ticker_post("Failed: " + demolish);
            }
        }
        else
            image_blend = c_white;
    }
}
else if (not visible)
{
    if (keyboard_check_pressed(ord('B')))
        visible = true;
        
    cur_struct = -1;
    sprite_index = -1;
    mask_index = -1;
}
else
{
    ui_display_money(true);

    x = mouse_x;
    y = mouse_y;
    
    var lock_to_grid = not keyboard_check(vk_lshift);
    if (lock_to_grid)
    {
        x -= mouse_x mod tile_size;
        y -= mouse_y mod tile_size;
    }

    for (var i = 0; i &lt; global.struct_info_count; i++)
    {
        var key = global.struct_info_key[i];
        if (key == -1) continue;
        
        if (keyboard_check_pressed(key))
        {
            cur_struct = i;
            break;
        }
    }
    
    if (cur_struct != -1)
    {
        image_alpha = 0.5;
        image_index = 0;
        image_speed = 0;
        mask_index = object_get_mask(global.struct_info_obj[cur_struct]);
        sprite_index = object_get_sprite(global.struct_info_obj[cur_struct]);
        
        var left = bbox_left - tile_size;
        var top = bbox_top - tile_size;
        var right = bbox_right + tile_size;
        var bottom = bbox_bottom + tile_size;
        
        var can_afford = global.money &gt;= global.struct_info_cost[cur_struct];
        var can_place = not collision_rectangle(left, top, right, bottom, obj_collision, false, true) 
                        and (0 &lt; left and right &lt; room_width and 0 &lt; top and bottom &lt; room_height);
        var is_valid = can_afford and can_place;
        
        if (is_valid) image_blend = c_white; else image_blend = c_red;
        
        if (mouse_check_button_pressed(mb_left))
        {
            if (is_valid)
            {
                struct_construct(cur_struct, x, y);
                global.money -= global.struct_info_cost[cur_struct];
                visible = false;
            }
            else
            {
                if (not can_afford)
                    ui_ticker_post("Insufficient funds");
                else if (not can_place)
                    ui_ticker_post("Invalid location");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
