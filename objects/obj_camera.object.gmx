<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keep_in_bounds = true;
zoom = 1;

width = view_wview[0];
height = view_hview[0];

if (os_type == os_android)
{
    height = width * (display_get_height() / display_get_width());

    view_wport[0] = display_get_width();
    view_hport[0] = display_get_height();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate zoom and keep camera in bounds

// Calculate the zoom
zoom = clamp(zoom, 1, 2);
view_wview[0] = width * zoom;
view_hview[0] = height * zoom;

// Keep view within game bounds
var xx = x - view_wview[0] / 2;
var yy = y - view_hview[0] / 2;

if (keep_in_bounds)
{
    view_xview[0] = clamp(xx, 0, room_width - view_wview[0]);
    view_yview[0] = clamp(yy, 0, room_height - view_hview[0]);
}
else
{
    view_xview[0] = xx;
    view_yview[0] = yy;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Resize window from input

var scale = 0;

if (keyboard_check_pressed(vk_f1))
    scale = 1;
if (keyboard_check_pressed(vk_f2))
    scale = 2;
if (keyboard_check_pressed(vk_f3))
    scale = 3;
if (keyboard_check_pressed(vk_f4))
    scale = 4;
    
if (scale != 0)
{
    window_set_size(base_width * scale, base_height * scale);
    window_set_position(
        display_get_width() / 2 - base_width * scale / 2,
        display_get_height() / 2 - base_height * scale / 2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update aspect ratio

var aspect = window_get_width() / window_get_height();

var view_height = min(base_height, window_get_height());
var view_width = view_height * aspect;

width = round(view_width);
height = round(view_height);

view_wport[0] = window_get_width();
view_hport[0] = window_get_height();

display_set_gui_size(width, height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
