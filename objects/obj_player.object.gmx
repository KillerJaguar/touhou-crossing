<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_renko_270</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_entity</parentName>
  <maskName>mask_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>direction = 270;
follower = noone;
home = -1;

// Prevents the player from exiting the room
bound_to_room = true;

moving = false;

if (not instance_exists(obj_camera))
    instance_create(0, 0, obj_camera_player);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// User input

event_inherited();

//if (dialogue_is_shown() or inventory_is_shown() or instance_exists(obj_util_transition)) 
if (not global.player_input)
{
    speed = 0;
}

else if (os_type != os_android)
{
    if (input_check_no_opposites())
    {
        if (not moving)
            image_index = 1;
    
        speed = move_speed * input_get_distance() * 1.5;
        
        if (speed != 0)
            direction = input_get_direction();
    }
    
    if (input_check_pressed(input.a))
        player_interact(x + lengthdir_x(interact_dist, direction), y + lengthdir_y(interact_dist, direction));
    
    if (input_check(input.b))
        speed *= 1.5;
    
    if (input_check_pressed(input.start))
        inventory_show();
}
else if (os_type == os_android)
{
    var is_moving = speed &gt; 0;
    var single_touch = mouse_check_button(mb_left);
    var double_touch = mouse_check_button(mb_right);

    if (single_touch)
    {
        direction = point_direction(x, y, mouse_x, mouse_y);
        
        var entity = instance_position(mouse_x, mouse_y, obj_entity);
        if (entity != noone)
        {
            if (point_distance(x, y, entity.x, entity.y) &lt;= interact_dist)
                player_interact(entity.x, entity.y);
        }
    }

    if (double_touch or (is_moving and single_touch))
    {
        speed = min(point_distance(x, y, mouse_x, mouse_y), move_speed * 1.5);   
    }
    else
        speed = 0;
}

var spd = speed;
var dir = direction;
moving = speed != 0;

/// Collision check

if (hspeed != 0)
{
    if (place_meeting(x+hspeed, y, obj_collision) or 
        bound_to_room and
            (bbox_left + hspeed &lt; 0 or 
            room_width &lt; bbox_right + hspeed))
    {
        hspeed = 0;
    }
    
    x += hspeed;
}

if (vspeed != 0)
{
    if (place_meeting(x, y+vspeed, obj_collision) or 
        bound_to_room and
            (bbox_top + vspeed &lt; 0 or
            room_height &lt; bbox_bottom + vspeed))
    {
        vspeed = 0;
    }
    
    y += vspeed;
}

speed = 0;
direction = dir;

/// Animation

if (not moving) image_index = 0;
image_speed = (5 * spd / room_speed); // incorrect code, but looks nicer
sprite_index = player_get_sprite(global.player_sprite, direction);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,12</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
