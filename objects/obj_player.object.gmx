<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_renko_270</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_collision</parentName>
  <maskName>mask_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum player_type
{
    renko,
    maribel
}

direction = 270;
follower = noone;
type = player_type.renko;
home = -1;

phy_fixed_rotation = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var animate = speed != 0;

if (not animate) image_index = 0;
image_speed = (5 * speed / room_speed); // incorrect code, but looks nicer
sprite_index = player_get_sprite(type, direction);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stay within room bounds

if (rectangle_in_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, 0, 0, room_width, room_height) != 1)
{
    x = xprevious;
    y = yprevious;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_camera_player.keep_in_bounds = player_is_outside();

var changed_room = (global.room_index != room);
if (changed_room)
{
    if (player_is_outside())
    {
        with (interior_id)
        {
            other.x = entrance.x + tile_size / 2;
            other.y = entrance.y + tile_size / 2;
            other.direction = 270;
            other.change_room = false;
            other.interior_id = -1;
        }
    }
    else
    {
        with (obj_interior_exit)
        {
            other.x = x + tile_size / 2;
            other.y = y - tile_size / 2;
            obj_player.direction = 90;
            obj_player.change_room = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// User input

event_inherited();

if (dialogue_is_shown() or inventory_is_shown() or instance_exists(obj_util_transition)) 
{
    speed = 0;
}

else if (os_type != os_android)
{
    if (input_check_no_opposites())
    {
        speed = move_speed * input_get_distance() * 1.5;
        
        if (speed != 0)
            direction = input_get_direction();
    }
    
    if (input_check_pressed(input.a))
        player_interact(x + lengthdir_x(interact_dist, direction), y + lengthdir_y(interact_dist, direction));
    
    if (input_check(input.b))
        speed *= 1.5;
}
else if (os_type == os_android)
{
    var is_moving = speed &gt; 0;
    var single_touch = mouse_check_button(mb_left);
    var double_touch = mouse_check_button(mb_right);

    if (single_touch)
    {
        direction = point_direction(x, y, mouse_x, mouse_y);
        
        var entity = instance_position(mouse_x, mouse_y, obj_entity);
        if (entity != noone)
        {
            if (point_distance(x, y, entity.x, entity.y) &lt;= interact_dist)
                player_interact(entity.x, entity.y);
        }
    }

    if (double_touch or (is_moving and single_touch))
    {
        speed = min(point_distance(x, y, mouse_x, mouse_y), move_speed * 1.5);   
    }
    else
        speed = 0;
}

phy_speed_x = lengthdir_x(speed, direction);
phy_speed_y = lengthdir_y(speed, direction);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//x = xprevious;
//y = yprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>7,14</point>
    <point>17,14</point>
    <point>17,29</point>
    <point>7,29</point>
  </PhysicsShapePoints>
</object>
